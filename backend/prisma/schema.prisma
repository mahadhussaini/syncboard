// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String
  lastName      String
  password      String
  avatar        String?
  isActive      Boolean  @default(true)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  ownedTeams          Team[]                     @relation("TeamOwner")
  teamMembers         TeamMember[]
  ownedWorkspaces     Workspace[]                @relation("WorkspaceOwner")
  workspaceMembers    WorkspaceMember[]
  ownedBoards         Board[]                    @relation("BoardOwner")
  assignedItems       BoardItem[]                @relation("ItemAssignee")
  notifications       Notification[]
  sessionParticipants CollaborationParticipant[] @relation("SessionParticipants")
  analyticsEvents     AnalyticsEvent[]
  aiRequests          AIRequest[]
  aiResponses         AIResponse[]
  attachments         Attachment[]
  refreshTokens       RefreshToken[]

  @@map("users")
}

// Team model
model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  avatar      String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner      User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members    TeamMember[]
  workspaces Workspace[]

  @@map("teams")
}

// Team member junction table
model TeamMember {
  id       String   @id @default(cuid())
  userId   String
  teamId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

// Workspace model
model Workspace {
  id          String        @id @default(cuid())
  name        String
  description String?
  type        WorkspaceType @default(KANBAN)
  teamId      String
  ownerId     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  team            Team              @relation(fields: [teamId], references: [id], onDelete: Cascade)
  owner           User              @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members         WorkspaceMember[]
  boards          Board[]
  aiAssistants    AIAssistant[]
  analyticsEvents AnalyticsEvent[]

  @@map("workspaces")
}

// Workspace member junction table
model WorkspaceMember {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@map("workspace_members")
}

// Board model
model Board {
  id          String    @id @default(cuid())
  name        String
  description String?
  type        BoardType @default(KANBAN)
  workspaceId String
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  workspace             Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  owner                 User                   @relation("BoardOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  columns               Column[]
  collaborationSessions CollaborationSession[]
  analyticsEvents       AnalyticsEvent[]

  @@map("boards")
}

// Column model
model Column {
  id        String   @id @default(cuid())
  name      String
  order     Int
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  board Board       @relation(fields: [boardId], references: [id], onDelete: Cascade)
  items BoardItem[]

  @@map("columns")
}

// Board item model
model BoardItem {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        ItemType  @default(TASK)
  columnId    String
  order       Int       @default(0)
  assigneeId  String?
  priority    Priority  @default(MEDIUM)
  dueDate     DateTime?
  tags        String[]  @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  column          Column           @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignee        User?            @relation("ItemAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  attachments     Attachment[]
  analyticsEvents AnalyticsEvent[]

  @@map("board_items")
}

// Attachment model
model Attachment {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  uploadedBy   String
  uploadedAt   DateTime @default(now())
  itemId       String?

  // Relations
  user User       @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  item BoardItem? @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

// Collaboration session model
model CollaborationSession {
  id           String   @id @default(cuid())
  boardId      String
  startedAt    DateTime @default(now())
  lastActivity DateTime @default(now())

  // Relations
  board        Board                      @relation(fields: [boardId], references: [id], onDelete: Cascade)
  participants CollaborationParticipant[]

  @@map("collaboration_sessions")
}

// Collaboration participant junction table
model CollaborationParticipant {
  id        String   @id @default(cuid())
  userId    String
  sessionId String
  joinedAt  DateTime @default(now())
  lastSeen  DateTime @default(now())

  // Relations
  user    User                 @relation("SessionParticipants", fields: [userId], references: [id], onDelete: Cascade)
  session CollaborationSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([userId, sessionId])
  @@map("collaboration_participants")
}

// AI Assistant model
model AIAssistant {
  id          String          @id @default(cuid())
  workspaceId String
  type        AIAssistantType
  config      Json
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("ai_assistants")
}

// AI Request model
model AIRequest {
  id          String          @id @default(cuid())
  type        AIAssistantType
  workspaceId String
  userId      String
  input       String
  context     Json?
  createdAt   DateTime        @default(now())

  // Relations
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses AIResponse[]

  @@map("ai_requests")
}

// AI Response model
model AIResponse {
  id          String   @id @default(cuid())
  requestId   String
  content     String
  suggestions String[] @default([])
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relations
  request AIRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  @@map("ai_responses")
}

// Notification model
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Analytics Event model
model AnalyticsEvent {
  id          String   @id @default(cuid())
  type        String
  userId      String
  workspaceId String?
  boardId     String?
  itemId      String?
  metadata    Json?
  createdAt   DateTime @default(now())

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace? @relation(fields: [workspaceId], references: [id])
  board     Board?     @relation(fields: [boardId], references: [id])
  item      BoardItem? @relation(fields: [itemId], references: [id])

  @@index([workspaceId])
  @@index([boardId])
  @@index([itemId])
  @@index([type, createdAt])
  @@map("analytics_events")
}

// Refresh token model for JWT refresh
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Enums
enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum WorkspaceType {
  KANBAN
  WHITEBOARD
  NOTES
  TIMELINE
  CUSTOM
}

enum BoardType {
  KANBAN
  WHITEBOARD
  NOTES
  TIMELINE
}

enum ItemType {
  TASK
  NOTE
  IDEA
  BUG
  FEATURE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AIAssistantType {
  TASK_SUGGESTER
  MEETING_SUMMARIZER
  TIMELINE_GENERATOR
  CODE_REVIEWER
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  TASK_OVERDUE
  TEAM_INVITE
  WORKSPACE_INVITE
  MENTION
  SYSTEM
}
